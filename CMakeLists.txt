cmake_minimum_required(VERSION 3.22)
project(CDIxx LANGUAGES CXX)
find_package(CUDA)
find_package( OpenCV REQUIRED )
find_package(MPI REQUIRED)
find_package(TBB REQUIRED)
set(TBB_LIBRARYS TBB::tbb TBB::tbbmalloc TBB::tbbmalloc_proxy)
set(Alllibs fftw3 config++ fftw3_mpi fftw3_threads m pthread ${MPI_LIBRARIES} ${TBB_LIBRARYS} ${OpenCV_LIBS})
set(CMAKE_BUILD_TYPE Debug)
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/lib)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
set(ENABLE_CUDA 1)
include_directories( ${OpenCV_INCLUDE_DIRS} )
include_directories ("${MPI_CXX_INCLUDE_DIRS}")
include_directories ("${PROJECT_SOURCE_DIR}/include")
cuda_include_directories ("${PROJECT_SOURCE_DIR}/include")
file( GLOB APP_SOURCES RELATIVE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/src/common/*.cc )
foreach( sourcefile ${APP_SOURCES} )
    string( REPLACE ".cc" "_cc" libname ${sourcefile} )
    string( REPLACE "src/common/" "" libname ${libname} )
    add_library( ${libname} ${sourcefile})
    #target_link_libraries(${libname} ${Alllibs})
    list(APPEND Alllibs ${libname}) 
endforeach( sourcefile ${APP_SOURCES} )


if(CUDA_FOUND AND ENABLE_CUDA)
	set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -arch compute_35")
	message(${CUDA_INCLUDE_DIRS})
    	enable_language(CUDA)
	list(APPEND Alllibs cufft)
	message(${Alllibs})
	file( GLOB APP_SOURCES RELATIVE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/src/gpu/*.cu )
	foreach( sourcefile ${APP_SOURCES} )
	    string( REPLACE ".cu" "_cu" libname ${sourcefile} )
	    string( REPLACE "src/gpu/" "" libname ${libname} )
	    cuda_add_library(${libname} ${sourcefile})
	    target_link_libraries(${libname} ${Alllibs})
            list(APPEND Alllibs ${libname}) 
	endforeach( sourcefile ${APP_SOURCES} )

	file( GLOB APP_SOURCES RELATIVE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/util/*.cu )
	foreach( sourcefile ${APP_SOURCES} )
	    string( REPLACE ".cu" "_cu" exename ${sourcefile} )
	    string( REPLACE "util/" "" exename ${exename} )
	    add_executable( ${exename} ${sourcefile})
	    target_link_libraries(${exename} ${Alllibs})
	endforeach( sourcefile ${APP_SOURCES} )

else()
	file( GLOB APP_SOURCES RELATIVE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/src/cpu/*.cc )
	foreach( sourcefile ${APP_SOURCES} )
	    string( REPLACE ".cc" "_cc" libname ${sourcefile} )
	    string( REPLACE "src/cpu/" "" libname ${libname} )
	    add_library( ${libname} ${sourcefile})
	    target_link_libraries(${libname} ${Alllibs})
            list(APPEND Alllibs ${libname}) 
	endforeach( sourcefile ${APP_SOURCES} )
endif()

file( GLOB APP_SOURCES RELATIVE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/util/*.cpp )
foreach( sourcefile ${APP_SOURCES} )
    string( REPLACE ".cpp" "_run" exename ${sourcefile} )
    string( REPLACE "util/" "" exename ${exename} )
    add_executable( ${exename} ${sourcefile})
    target_link_libraries(${exename} ${Alllibs})
endforeach( sourcefile ${APP_SOURCES} )

