name = "CDIxx config file"

InputImages = 
{
  default= {
    Pattern="init_pattern.png";
    //Intensity="einstein.bmp";
    Intensity="image.tiff";
    Phase="einstein.bmp";
    restart="recon.yaml";
  };
  KCDI= {
    Pattern="KCDI_intensity.png";
    Intensity="einstein.bmp";
    //Intensity="empty.png";
    Phase="einstein.bmp";
    restart="KCDIrecon.yaml";
  };
};

Job = 
{
//These are float types, dot is needed, be careful
//lengths are in micron (1e-6 meters)
  oversampling = 3.; // over sampling ratio
  lambda = 0.6;  //wave length in micron
  d = 26e3;  // distance between CCD and sample in micron
  pixelsize = 26.; // pixel size in micron
  beamspotsize = 500.; // sample size in micron
  exposure = 0.15; // control the pattern intensity, could be tuned to match the experiment
//These are integers:
  beamStopSize = 10;
  nIter = 5000;
  nIterKCDI = 2000;
//These are bool types
//  saveIter = True; // save the reconstructed imaging each 100 iterations if set to true
//  phaseModulation = True; // default.Phase is used to modulate image if set to true
//  runSim = True; // default.Intensity is used to simulate the diffraction pattern if set to true.
                 // Otherwise, default.Pattern is used to reconstruct sample
//  simCCDbit = True;  //Simulate integerization of 16bit CCD
  isFresnel = True;  //Set to true if you are not using lenses
//  useBS=True; // Beamstop is added if set to true
  useShrinkMap = True; //shrinking wrap is used if set to true
//  doIteration = True;  // Run reconstruction if set to true
  restart=True; // default.restart is used for reconstruction starting point if set to true
//  useGaussionLumination = True; //Illuminate sample with gaussian beam
//  useGaussionHERALDO = True; //Run gaussian HERALDO if set to true
//  doCentral =True; // not supported yet
//  useRectHERALDO = True; //Run rectangle HERALDO if set to true
  doKCDI = True; // not supported yet
//  useDM=True; //set to true if you want to use Difference map algorithm
//  reconAC = True; // For test only
};
